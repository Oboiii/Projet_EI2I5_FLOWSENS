#include <DHT.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include "Adafruit_TSL2591.h"
#include "DFRobot_ESP_PH.h"
#include "EEPROM.h"
#include <WiFi.h>
#include <HTTPClient.h>

String URL = "http://192.168.90.164/dht11_project/test_data.php";
const char* ssid = "Lilian ?"; 
const char* password = "toujoursabsent";

float sensorlum;

#define DHTPIN 2
#define DHTTYPE DHT11

// Capteur de lumière
Adafruit_TSL2591 tsl = Adafruit_TSL2591(2591);

// Déclaration du capteur DHT
DHT dht(DHTPIN, DHTTYPE);

// Broche à laquelle est connecté le capteur d'humidité du sol (A0 sur ESP32 --> GPIO 36)
int soilHumidityPin = 36;

//#define Offset -7.7
#define Offset -7.5
DFRobot_ESP_PH ph;
#define ESPADC 4096.0   // Valeur de conversion analogique-numérique ESP32
#define ESPVOLTAGE 3300 // Tension d'alimentation ESP32
#define PH_PIN 35        // Broche GPIO de l'ESP pour la lecture du pH
float voltage, phValue, temperature = 25;

void setup()
{
  Serial.begin(115200);
  EEPROM.begin(32);  // Nécessaire pour permettre le stockage de la valeur de calibration dans l'EEPROM
  ph.begin();
  Serial.println(F("Démarrage du test Adafruit TSL2591 !"));
  // Initialisation du capteur DHT
  dht.begin();

  if (tsl.begin())
  {
    Serial.println(F("Capteur TSL2591 trouvé"));
  }
  else
  {
    Serial.println(F("Aucun capteur trouvé ... vérifiez votre câblage ?"));
    while (1);
  }

  displaySensorDetails();
  configureSensor();
  connectWiFi();
}

void displaySensorDetails(void)
{
  sensor_t sensor;
  tsl.getSensor(&sensor);
  Serial.println(F("------------------------------------"));
  Serial.print(F("Capteur:       ")); Serial.println(sensor.name);
  Serial.print(F("Version du pilote:   ")); Serial.println(sensor.version);
  Serial.print(F("ID unique:    ")); Serial.println(sensor.sensor_id);
  Serial.print(F("Valeur maximale:    ")); Serial.print(sensor.max_value); Serial.println(F(" lux"));
  Serial.print(F("Valeur minimale:    ")); Serial.print(sensor.min_value); Serial.println(F(" lux"));
  Serial.print(F("Résolution:   ")); Serial.print(sensor.resolution, 4); Serial.println(F(" lux"));
  Serial.println(F("------------------------------------"));
  Serial.println(F(""));
  delay(5000);
}

void configureSensor(void)
{
  tsl.setGain(TSL2591_GAIN_LOW);
  tsl.setTiming(TSL2591_INTEGRATIONTIME_500MS);

  Serial.println(F("------------------------------------"));
  Serial.print(F("Gain:         "));
  tsl2591Gain_t gain = tsl.getGain();
  switch (gain)
  {
    case TSL2591_GAIN_LOW:
      Serial.println(F("1x (Faible)"));
      break;
    case TSL2591_GAIN_MED:
      Serial.println(F("25x (Moyen)"));
      break;
    case TSL2591_GAIN_HIGH:
      Serial.println(F("428x (Élevé)"));
      break;
    case TSL2591_GAIN_MAX:
      Serial.println(F("9876x (Max)"));
      break;
  }
  Serial.print(F("Timing:       "));
  Serial.print((tsl.getTiming() + 1) * 100, DEC);
  Serial.println(F(" ms"));
  Serial.println(F("------------------------------------"));
  Serial.println(F(""));
}

void unifiedSensorAPIRead(void)
{
  sensors_event_t event;
  tsl.getEvent(&event);

  Serial.print(F("[ ")); 
  Serial.print(event.timestamp); 
  Serial.print(F(" ms ] "));
  if ((event.light == 0) ||
      (event.light > 4294966000.0) ||
      (event.light < -4294966000.0))
  {
    Serial.println(F("Données invalides (ajustez le gain ou le timing)"));
  }
  else
  {
    Serial.print(F("Lux: ")); 
    Serial.println(event.light, 6);
    sensorlum = event.light;
  }
}

void loop()
{
  if (WiFi.status() != WL_CONNECTED) {
    connectWiFi();
  }

  // Mesure du pH
  static unsigned long timepoint = millis();
  if (millis() - timepoint > 1000U)  // intervalle de temps : 1s
  { 
    timepoint = millis();
    voltage = analogRead(PH_PIN) / ESPADC * ESPVOLTAGE; // lecture de la tension
    Serial.print("Tension :");
    Serial.println(voltage, 4);
    Serial.print("Température :");
    Serial.print(temperature, 1);
    Serial.println("^C");
    voltage = voltage - 1.5 + 1.172;
    phValue = 12.5 * voltage / 1000.0 + Offset;
    Serial.print("pH :");
    Serial.println(phValue, 4);
  }

  delay(5000);
  ph.calibration(voltage, temperature); // processus de calibration via Serail CMD

  // Mesure de la lumière
  unifiedSensorAPIRead();
  delay(5000);

  // Lecture de la température
  float temperature = dht.readTemperature();

  // Vérification si la lecture a échoué
  if (!isnan(temperature))
  {
    // Affichage de la température
    Serial.print("Température : ");
    Serial.println(temperature);
  }
  else
  {
    // Affichage d'une erreur si la lecture a échoué
    Serial.println("Erreur de lecture du capteur DHT");
  }

  // Lecture de l'humidité du sol
  int soilHumidityValue = analogRead(soilHumidityPin);

  // Conversion de la valeur analogique en pourcentage d'humidité
  float humidityPercentage = map(soilHumidityValue, 0, 1023, 0, 100.0);

  // Affichage de l'humidité du sol
  Serial.print("Humidité du sol : ");
  Serial.print(soilHumidityValue);
  Serial.print(" (Analog) / ");
  Serial.print(humidityPercentage);
  Serial.println("% (Conversion)");

  String postData =  "id=1234&temperature=" + String(temperature) + "&humidity=" + String(humidityPercentage) + "&luminosity=" + String(sensorlum) +"&ph=" + String(phValue);

  HTTPClient http;
  http.begin(URL);
  http.addHeader("Content-Type", "application/x-www-form-urlencoded");

  int httpCode = http.POST(postData);
  String payload = http.getString();

  Serial.print("URL : "); 
  Serial.println(URL); 
  Serial.print("Données : "); 
  Serial.println(postData);
  Serial.print("Code HTTP : "); 
  Serial.println(httpCode);
  Serial.print("Charge utile : "); 
  Serial.println(payload);
  Serial.println("--------------------------------------------------");
  delay(5000);
}

void connectWiFi() {
  WiFi.mode(WIFI_OFF);
  delay(5000);
  // Cette ligne masque l'affichage de l'ESP en tant que hotspot WiFi
  WiFi.mode(WIFI_STA);

  WiFi.begin(ssid, password);
  Serial.println("Connexion au WiFi");

  while (WiFi.status() != WL_CONNECTED) {
    delay(5000);
    Serial.print(".");
  }

  Serial.print("Connecté à : "); 
  Serial.println(ssid);
  Serial.print("Adresse IP : "); 
  Serial.println(WiFi.localIP());
}
